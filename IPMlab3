float* RSA()
{
	// creating keys:

	int p = 5;
	int q = 7;
	int qpmodule = p * q;

	std::cout << '\n';
	std::cout << "p = " << p << std::endl;
	std::cout << "q = " << q << std::endl;
	std::cout << "qpmodule = " << qpmodule << std::endl;
	std::cout << '\n';

	int Euler_func = (p - 1) * (q - 1);
	std::cout << "Euler's function = " << Euler_func << std::endl;

	int new_num = 0;
	int mut_simple = 0;
	for (int i = 2; i < Euler_func; i++) {
		int flag = 0;
		for (int j = 2; j < Euler_func; j++) {
			if ((Euler_func % j == 0) && (i % j == 0))
			{
				flag = 1;
			}
		}
		if (flag == 0)
		{
			mut_simple = i;
			break;
		}
	}
	std::cout << "Muttual simple number = " << mut_simple << std::endl;
	std::cout << '\n';

	float d = 1 / mut_simple;

	int public_key[2] = {mut_simple, qpmodule};
	float private_key[2] = {d, qpmodule};

	// data init
	float data_help[10];
	for (int i = 0; i < 10; i++) {
		data_help[i] = (i + 1) * 2;
		std::cout << "data_start = " << data_help[i] << std::endl;
	}
	std::cout << '\n';

	// encryption
	for (int i = 0; i < 10; i++) {
		data_help[i] = pow(data_help[i], public_key[0]);
		data_help[i] = int(data_help[i]) % public_key[1];
		std::cout << "data = " << data_help[i] << std::endl;
	}

	return data_help;
}
