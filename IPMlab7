int DFP(int inp_data)
{
	std::cout << "input data = " << inp_data << std::endl;

	//F37
	//y^2 = x^3 - x + 3;
	int N = 42;
	int n = 7;
	float h = N / n;

	int P[2]; // rand
	int G[2];

	P[0] = 2;
	P[1] = 3;

	// basic subgroup point create

	G[0] = P[0] * h;
	G[1] = P[1] * h;

	int d[2]; // [1, n-1]
	int H0[2];
	int H1[2];

	d[0] = 3;
	d[1] = 4;

	// public keys creation

	H0[0] = d[0] * G[0];
	H0[1] = d[0] * G[1];

	H1[0] = d[1] * G[0];
	H1[1] = d[1] * G[1];

	std::cout << "private keys = " << d[0] << ", " << d[1] << std::endl;
	std::cout << "public keys = (" << H0[0] << ", " << H0[1] << "); and ("<< H1[0] << ", " << H1[1] << ")" << std::endl;

	// key exchange

	int S0[2];
	int S1[2];

	S0[0] = d[1] * H0[0];
	S0[1] = d[1] * H0[1];
	S1[0] = d[0] * H1[0];
	S1[1] = d[0] * H1[1];

	std::cout << "S0 = (" << S0[0] << ", " << S0[1] << ")" << std::endl;
	std::cout << "S1 = (" << S1[0] << ", " << S1[1] << ")" << std::endl;

	int flag = 0;
	if (S0[0] == S1[0])
	{
		if (S0[1] == S1[1])
		{
			std::cout << "keys matched" << std::endl;
		}
		else
		{
			flag = 1;
			std::cout << "y var was grong" << std::endl;
		}
	}
	else
	{
		flag = 1;
		std::cout << "x var was grong" << std::endl;
	}

	// encrypt data if S0 == S1
	if (flag == 0)
	{
		return inp_data + S0[0] - S0[1];
	}
	else
	{
		return inp_data;
	}
}


int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
  
  // lab7
	// DFP on EC
	int data = 3274;
	int output_data;
	output_data = DFP(data);
	if (output_data == data)
	{
		std::cout << "error" << std::endl;
	}
	else
	{
		std::cout << "output data = " << output_data << std::endl;
	}

	return 0;
}
